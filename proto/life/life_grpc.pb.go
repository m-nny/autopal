// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: proto/life/life.proto

package proto_life

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LifeServiceClient is the client API for LifeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LifeServiceClient interface {
	GetRandomState(ctx context.Context, in *GetRandomStateRequest, opts ...grpc.CallOption) (*GetRandomStateResponse, error)
	GetNextState(ctx context.Context, in *GetNextStateRequest, opts ...grpc.CallOption) (*GetNextStateResponse, error)
	PlayRandomGame(ctx context.Context, in *PlayRandomGameRequest, opts ...grpc.CallOption) (LifeService_PlayRandomGameClient, error)
}

type lifeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLifeServiceClient(cc grpc.ClientConnInterface) LifeServiceClient {
	return &lifeServiceClient{cc}
}

func (c *lifeServiceClient) GetRandomState(ctx context.Context, in *GetRandomStateRequest, opts ...grpc.CallOption) (*GetRandomStateResponse, error) {
	out := new(GetRandomStateResponse)
	err := c.cc.Invoke(ctx, "/autopal.life.LifeService/GetRandomState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifeServiceClient) GetNextState(ctx context.Context, in *GetNextStateRequest, opts ...grpc.CallOption) (*GetNextStateResponse, error) {
	out := new(GetNextStateResponse)
	err := c.cc.Invoke(ctx, "/autopal.life.LifeService/GetNextState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifeServiceClient) PlayRandomGame(ctx context.Context, in *PlayRandomGameRequest, opts ...grpc.CallOption) (LifeService_PlayRandomGameClient, error) {
	stream, err := c.cc.NewStream(ctx, &LifeService_ServiceDesc.Streams[0], "/autopal.life.LifeService/PlayRandomGame", opts...)
	if err != nil {
		return nil, err
	}
	x := &lifeServicePlayRandomGameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LifeService_PlayRandomGameClient interface {
	Recv() (*PlayRandomGameResponse, error)
	grpc.ClientStream
}

type lifeServicePlayRandomGameClient struct {
	grpc.ClientStream
}

func (x *lifeServicePlayRandomGameClient) Recv() (*PlayRandomGameResponse, error) {
	m := new(PlayRandomGameResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LifeServiceServer is the server API for LifeService service.
// All implementations must embed UnimplementedLifeServiceServer
// for forward compatibility
type LifeServiceServer interface {
	GetRandomState(context.Context, *GetRandomStateRequest) (*GetRandomStateResponse, error)
	GetNextState(context.Context, *GetNextStateRequest) (*GetNextStateResponse, error)
	PlayRandomGame(*PlayRandomGameRequest, LifeService_PlayRandomGameServer) error
	mustEmbedUnimplementedLifeServiceServer()
}

// UnimplementedLifeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLifeServiceServer struct {
}

func (UnimplementedLifeServiceServer) GetRandomState(context.Context, *GetRandomStateRequest) (*GetRandomStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomState not implemented")
}
func (UnimplementedLifeServiceServer) GetNextState(context.Context, *GetNextStateRequest) (*GetNextStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextState not implemented")
}
func (UnimplementedLifeServiceServer) PlayRandomGame(*PlayRandomGameRequest, LifeService_PlayRandomGameServer) error {
	return status.Errorf(codes.Unimplemented, "method PlayRandomGame not implemented")
}
func (UnimplementedLifeServiceServer) mustEmbedUnimplementedLifeServiceServer() {}

// UnsafeLifeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LifeServiceServer will
// result in compilation errors.
type UnsafeLifeServiceServer interface {
	mustEmbedUnimplementedLifeServiceServer()
}

func RegisterLifeServiceServer(s grpc.ServiceRegistrar, srv LifeServiceServer) {
	s.RegisterService(&LifeService_ServiceDesc, srv)
}

func _LifeService_GetRandomState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifeServiceServer).GetRandomState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autopal.life.LifeService/GetRandomState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifeServiceServer).GetRandomState(ctx, req.(*GetRandomStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifeService_GetNextState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifeServiceServer).GetNextState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autopal.life.LifeService/GetNextState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifeServiceServer).GetNextState(ctx, req.(*GetNextStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifeService_PlayRandomGame_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PlayRandomGameRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LifeServiceServer).PlayRandomGame(m, &lifeServicePlayRandomGameServer{stream})
}

type LifeService_PlayRandomGameServer interface {
	Send(*PlayRandomGameResponse) error
	grpc.ServerStream
}

type lifeServicePlayRandomGameServer struct {
	grpc.ServerStream
}

func (x *lifeServicePlayRandomGameServer) Send(m *PlayRandomGameResponse) error {
	return x.ServerStream.SendMsg(m)
}

// LifeService_ServiceDesc is the grpc.ServiceDesc for LifeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LifeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "autopal.life.LifeService",
	HandlerType: (*LifeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRandomState",
			Handler:    _LifeService_GetRandomState_Handler,
		},
		{
			MethodName: "GetNextState",
			Handler:    _LifeService_GetNextState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PlayRandomGame",
			Handler:       _LifeService_PlayRandomGame_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/life/life.proto",
}
